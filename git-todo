#!/bin/sh
set -e
  GIT_OPTS=""
  OUTPUT_FILTER="cat" # no-op
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  TODO_FLAG='@todo';
  DONE_FLAG='@done'
  reset=$(tput sgr0)
  ifs=$IFS
  from_commit=""
  notes=""
  list_of_todo=""
  list_of_done=""
  selected_todo=""

get_notes()
{
  notes_rev=$( \
    for rev in $( git rev-list -25 HEAD ); do
      git notes list $rev 2>/dev/null && break;
    done \
  );

  if [ $notes_rev ]; then
    IFS=""
    notes=$( git cat-file -p $notes_rev )
    list_of_todo=$( echo $notes | grep "$TODO_FLAG" || echo '' )
    list_of_done=$( echo $notes | grep "$DONE_FLAG" || echo '' )
  else
    echo "No notes found"
    exit 1
  fi;
}

# List all todos
show()
{
  get_notes;

  if [ $list_of_done ]; then
    echo "$GREEN$DONE_FLAG$reset"
    echo $list_of_done \
    | sed -e "s/$DONE_FLAG//" \
    | while read -a task; do
      echo "$GREEN- [x]$reset${task}"
    done
  fi;

  if [ $list_of_todo ]; then
    echo "$RED$TODO_FLAG$reset"
    echo $list_of_todo \
    | sed -e "s/$TODO_FLAG//" \
    | while read -a task; do
      echo "$RED- [ ]$reset${task}"
    done
  fi;
}

copy()
{
  get_notes;

  git notes add -m "$notes"
}

# Create a new Todo
add()
{
  git notes append -m "$TODO_FLAG $@"

  show
}

# Get rid of a todo
remove()
{
  echo $@
}

mark()
{
  get_notes;

  git notes remove;


}

# Commit a todo as finished
finish() {
  get_notes;

  # echo $notes \
  # | grep $DONE_FLAG \
  # | sed -e "s/$DONE_FLAG/- [x]/"

  if [ $( git diff --cached --quiet ) $? -eq 0 ]; then
    echo "Nothing staged for commit"
    exit 1
  fi

  git commit -m "$message"
  git notes add "$(sed "s/$TODO_FLAG $message/$DONE_FLAG $message/" <<< $notes)"

  show
}

help()
{
  echo "usage: git todo show";
  echo "   or: git todo copy";
  echo "   or: git todo add";
  echo "   or: git todo remove";
  echo "   or: git todo finish";
}

# list
IFS=$ifs
case $1 in
  'show')
    shift;
    show "$@" ;;
  'copy')
    shift;
    copy "$@" ;;
  'add')
    shift;
    add "$@" ;;
  'remove')
    shift;
    remove "$0" ;;
  'mark')
    shift;
    mark "$@" ;;
  'finish')
    shift;
    finish "$@" ;;
  'help')
    help;;
  *)
    echo "error: unknown subcommand: $1"
    help;;
esac
